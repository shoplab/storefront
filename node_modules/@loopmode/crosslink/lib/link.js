"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = link;

var _globPromise = _interopRequireDefault(require("glob-promise"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _rimraf = _interopRequireDefault(require("rimraf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function link(_x) {
  return _link.apply(this, arguments);
}

function _link() {
  _link = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(definition) {
    var _ref,
        cwd,
        _ref$dryRun,
        dryRun,
        _ref$overwrite,
        overwrite,
        _ref$noscope,
        noscope,
        _definition$split,
        _definition$split2,
        fromDef,
        targetDef,
        sourceDirs,
        sourcePackages,
        targetFolders,
        _iterator,
        _step,
        source,
        _iterator2,
        _step2,
        target,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, cwd = _ref.cwd, _ref$dryRun = _ref.dryRun, dryRun = _ref$dryRun === void 0 ? false : _ref$dryRun, _ref$overwrite = _ref.overwrite, overwrite = _ref$overwrite === void 0 ? false : _ref$overwrite, _ref$noscope = _ref.noscope, noscope = _ref$noscope === void 0 ? false : _ref$noscope;
            definition = definition.replace(/ -> /, '->');
            _definition$split = definition.split('->'), _definition$split2 = _slicedToArray(_definition$split, 2), fromDef = _definition$split2[0], targetDef = _definition$split2[1];
            fromDef = _path.default.resolve(`${cwd}/${fromDef}/package.json`);
            targetDef = _path.default.resolve(`${cwd}/${targetDef}`); //
            // prepare a list of sources for the symlinks
            // use all folders in the target that have a package.json
            //

            _context.next = 7;
            return (0, _globPromise.default)(fromDef);

          case 7:
            sourceDirs = _context.sent;
            _context.next = 10;
            return getValidSources(sourceDirs);

          case 10:
            sourcePackages = _context.sent;
            _context.next = 13;
            return (0, _globPromise.default)(targetDef);

          case 13:
            targetFolders = _context.sent;

            if (!(!targetFolders.length && targetDef.indexOf('*') === -1)) {
              _context.next = 19;
              break;
            }

            if (dryRun) {
              _context.next = 18;
              break;
            }

            _context.next = 18;
            return _fsExtra.default.ensureDir(targetDef);

          case 18:
            targetFolders = [targetDef];

          case 19:
            //
            // now create the actual symlinks
            //
            _iterator = _createForOfIteratorHelper(sourcePackages);
            _context.prev = 20;

            _iterator.s();

          case 22:
            if ((_step = _iterator.n()).done) {
              _context.next = 61;
              break;
            }

            source = _step.value;
            _iterator2 = _createForOfIteratorHelper(targetFolders);
            _context.prev = 25;

            _iterator2.s();

          case 27:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 51;
              break;
            }

            target = _step2.value;

            if (!(source.scope && !noscope)) {
              _context.next = 36;
              break;
            }

            if (dryRun) {
              _context.next = 33;
              break;
            }

            _context.next = 33;
            return _fsExtra.default.ensureDir(`${target}/${source.scope}`);

          case 33:
            target = _path.default.resolve(`${target}/${source.scope}/${source.name}`);
            _context.next = 37;
            break;

          case 36:
            target = _path.default.resolve(`${target}/${source.name}`);

          case 37:
            if (!dryRun) {
              _context.next = 41;
              break;
            }

            console.log('[crosslink] dryRun:', source.dirname, 'â†’', target);
            _context.next = 49;
            break;

          case 41:
            _context.prev = 41;
            _context.next = 44;
            return ensureSymlink(source.dirname, target, overwrite);

          case 44:
            _context.next = 49;
            break;

          case 46:
            _context.prev = 46;
            _context.t0 = _context["catch"](41);
            console.warn(_context.t0);

          case 49:
            _context.next = 27;
            break;

          case 51:
            _context.next = 56;
            break;

          case 53:
            _context.prev = 53;
            _context.t1 = _context["catch"](25);

            _iterator2.e(_context.t1);

          case 56:
            _context.prev = 56;

            _iterator2.f();

            return _context.finish(56);

          case 59:
            _context.next = 22;
            break;

          case 61:
            _context.next = 66;
            break;

          case 63:
            _context.prev = 63;
            _context.t2 = _context["catch"](20);

            _iterator.e(_context.t2);

          case 66:
            _context.prev = 66;

            _iterator.f();

            return _context.finish(66);

          case 69:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[20, 63, 66, 69], [25, 53, 56, 59], [41, 46]]);
  }));
  return _link.apply(this, arguments);
}

function ensureSymlink(_x2, _x3, _x4) {
  return _ensureSymlink.apply(this, arguments);
}

function _ensureSymlink() {
  _ensureSymlink = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(source, target, overwrite) {
    var exists, stats, _link2;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            exists = _fsExtra.default.existsSync(target);

            if (exists) {
              _context2.next = 11;
              break;
            }

            _context2.prev = 2;
            _context2.next = 5;
            return lstat(target);

          case 5:
            stats = _context2.sent;
            exists = !!stats;
            _context2.next = 11;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](2);

          case 11:
            if (exists) {
              _context2.next = 21;
              break;
            }

            _context2.prev = 12;
            _context2.next = 15;
            return readlink(target);

          case 15:
            _link2 = _context2.sent;
            exists = !!_link2;
            _context2.next = 21;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t1 = _context2["catch"](12);

          case 21:
            if (!(exists && overwrite)) {
              _context2.next = 31;
              break;
            }

            _context2.prev = 22;
            _context2.next = 25;
            return rm(target);

          case 25:
            exists = false;
            _context2.next = 31;
            break;

          case 28:
            _context2.prev = 28;
            _context2.t2 = _context2["catch"](22);
            console.log(`[crosslink] Failed deleting existing target: ${_context2.t2.message}`);

          case 31:
            if (exists) {
              console.log(`[crosslink] Refusing to overwrite existing target: ${target}`);
              console.log(`[crosslink] You can use the --overwrite (or -o) option to force it.`);
            } else {
              _fsExtra.default.symlinkSync(source, target, 'junction');

              console.log('[crosslink] created:', source, 'â†’', target);
            }

          case 32:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 9], [12, 19], [22, 28]]);
  }));
  return _ensureSymlink.apply(this, arguments);
}

function rm(target) {
  return new Promise(function (resolve, reject) {
    (0, _rimraf.default)(target, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
}

function lstat(target) {
  return new Promise(function (resolve, reject) {
    _fsExtra.default.lstat(target, function (error, stats) {
      if (error) {
        reject(error);
        return;
      }

      resolve(stats);
    });
  });
}

function readlink(target) {
  return new Promise(function (resolve, reject) {
    _fsExtra.default.readlink(target, function (error, linkString) {
      if (error) {
        reject(error);
        return;
      }

      resolve(linkString);
    });
  });
}

function getValidSources(_x5) {
  return _getValidSources.apply(this, arguments);
}

function _getValidSources() {
  _getValidSources = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(sources) {
    var result, _iterator3, _step3, source, dirname, exists, _yield$getPackageInfo, scope, name;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            result = [];
            _iterator3 = _createForOfIteratorHelper(sources);
            _context3.prev = 2;

            _iterator3.s();

          case 4:
            if ((_step3 = _iterator3.n()).done) {
              _context3.next = 19;
              break;
            }

            source = _step3.value;
            dirname = _path.default.dirname(source);
            _context3.next = 9;
            return _fsExtra.default.pathExists(dirname);

          case 9:
            exists = _context3.sent;

            if (!exists) {
              _context3.next = 17;
              break;
            }

            _context3.next = 13;
            return getPackageInfo(dirname);

          case 13:
            _yield$getPackageInfo = _context3.sent;
            scope = _yield$getPackageInfo.scope;
            name = _yield$getPackageInfo.name;
            // console.log({ dirname, exists, scope, name });
            result.push({
              dirname,
              scope,
              name
            });

          case 17:
            _context3.next = 4;
            break;

          case 19:
            _context3.next = 24;
            break;

          case 21:
            _context3.prev = 21;
            _context3.t0 = _context3["catch"](2);

            _iterator3.e(_context3.t0);

          case 24:
            _context3.prev = 24;

            _iterator3.f();

            return _context3.finish(24);

          case 27:
            return _context3.abrupt("return", result);

          case 28:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[2, 21, 24, 27]]);
  }));
  return _getValidSources.apply(this, arguments);
}

function getPackageInfo(_x6) {
  return _getPackageInfo.apply(this, arguments);
}

function _getPackageInfo() {
  _getPackageInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dirname) {
    var pkg, _pkg$name$split, _pkg$name$split2, scope, name;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _fsExtra.default.readJson(`${dirname}/package.json`);

          case 2:
            pkg = _context4.sent;

            if (!(pkg.name[0] === '@')) {
              _context4.next = 6;
              break;
            }

            _pkg$name$split = pkg.name.split('/'), _pkg$name$split2 = _slicedToArray(_pkg$name$split, 2), scope = _pkg$name$split2[0], name = _pkg$name$split2[1];
            return _context4.abrupt("return", {
              scope,
              name
            });

          case 6:
            return _context4.abrupt("return", {
              scope: undefined,
              name: pkg.name
            });

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getPackageInfo.apply(this, arguments);
}