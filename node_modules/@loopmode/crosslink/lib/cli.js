"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _globPromise = _interopRequireDefault(require("glob-promise"));

var _path = _interopRequireDefault(require("path"));

var _bootstrap = _interopRequireDefault(require("./bootstrap"));

var _link = _interopRequireDefault(require("./link"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var pkg = require(_path.default.resolve(__dirname, '../package.json'));

_commander.default.version(pkg.version);

var runDefault = true; // ----------------------------------------
//
// default command
// crosslink ./target
//
// ----------------------------------------

_commander.default.usage('[target]').option('-f, --filename [filename]', 'specify name of definition files', '{.crosslink,package.json}').option('-p, --propname [propname]', 'specify name of property in JSON definitions', 'crosslink').option('-r, --recursive [recursive]', 'scan for definition files recursively', false).option('-o, --overwrite [overwrite]', 'overwrite existing target', false).option('-d, --dry [dry]', 'perform a dry run and report, do not create symlinks', false).option('--noscope [noscope]', 'do not create intermediary scope folder', false).on('--help', function () {
  console.log('');
  console.log('  Arguments:');
  console.log('');
  console.log('     target                      The directory in which to operate (default: .)');
}); // ----------------------------------------
//
// link command
// crosslink link ./a/*->./b
//
// ----------------------------------------


_commander.default.command('link <definition>').option('-o, --overwrite [overwrite]', 'overwrite existing target', false).option('-d, --dry [dry]', 'perform a dry run and report, do not create symlinks', false).option('--noscope [noscope]', 'do not create intermediary scope folder', false).on('--help', function () {
  console.log('');
  console.log('  Arguments:');
  console.log('');
  console.log('     definition                  A definition in the format source->target');
}).action(function (definition) {
  runDefault = false;
  (0, _link.default)(definition, {
    cwd: getCwd(),
    dryRun: _commander.default.dry,
    overwrite: _commander.default.overwrite,
    noscope: _commander.default.noscope
  });
});

_commander.default.parse(process.argv);

if (runDefault) {
  // instead of using program.action(run), we just execute our run function manually
  // (otherwise we wouldn't run at all due to https://github.com/tj/commander.js/issues/729)
  var _program$args = _slicedToArray(_commander.default.args, 1),
      _program$args$ = _program$args[0],
      target = _program$args$ === void 0 ? '.' : _program$args$;

  run(target);
}

function run(_x) {
  return _run.apply(this, arguments);
}

function _run() {
  _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(target) {
    var cwd, recursiveGlob, targetGlob, definitionFiles, _iterator, _step, file;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cwd = getCwd(target);
            recursiveGlob = _commander.default.recursive ? '/**' : '';
            targetGlob = _path.default.resolve(`${cwd}${recursiveGlob}/${_commander.default.filename}`);
            definitionFiles = [];
            _context.prev = 4;
            _context.next = 7;
            return (0, _globPromise.default)(targetGlob);

          case 7:
            definitionFiles = _context.sent;
            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](4);
            console.warn('[crosslink] Unable to resolve glob', targetGlob);

          case 13:
            if (definitionFiles.length === 0) {
              console.warn('[crosslink] No definition files found for', targetGlob);
            }

            _iterator = _createForOfIteratorHelper(definitionFiles);
            _context.prev = 15;

            _iterator.s();

          case 17:
            if ((_step = _iterator.n()).done) {
              _context.next = 29;
              break;
            }

            file = _step.value;
            _context.prev = 19;
            _context.next = 22;
            return (0, _bootstrap.default)(_path.default.resolve(file), {
              cwd: _path.default.dirname(_path.default.resolve(file)),
              dryRun: _commander.default.dry,
              noscope: _commander.default.noscope,
              propname: _commander.default.propname,
              overwrite: _commander.default.overwrite
            });

          case 22:
            _context.next = 27;
            break;

          case 24:
            _context.prev = 24;
            _context.t1 = _context["catch"](19);
            console.warn('[crosslink] Unable to bootstrap', file);

          case 27:
            _context.next = 17;
            break;

          case 29:
            _context.next = 34;
            break;

          case 31:
            _context.prev = 31;
            _context.t2 = _context["catch"](15);

            _iterator.e(_context.t2);

          case 34:
            _context.prev = 34;

            _iterator.f();

            return _context.finish(34);

          case 37:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 10], [15, 31, 34, 37], [19, 24]]);
  }));
  return _run.apply(this, arguments);
}

function getCwd(target) {
  var cwd = process.cwd();

  if (target) {
    if (target[0] === '.') {
      return _path.default.resolve(cwd, target);
    } else {
      return _path.default.resolve(target);
    }
  }

  return _path.default.resolve(cwd);
}