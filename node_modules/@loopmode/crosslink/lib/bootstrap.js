"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bootstrap;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _link = _interopRequireDefault(require("./link"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function bootstrap(_x) {
  return _bootstrap.apply(this, arguments);
}
/**
 * Takes the path to either a `{"crosslink":['a -> b', 'a -> c']}` json file
 * or a text file with one `a -> b` crosslink definition per line
 * @param {string} filepath - path to a crosslink config file
 * @return {array} - An array of crosslink definitions
 */


function _bootstrap() {
  _bootstrap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file) {
    var _ref,
        _ref$cwd,
        cwd,
        _ref$dryRun,
        dryRun,
        propname,
        _ref$overwrite,
        overwrite,
        _ref$noscope,
        noscope,
        definitions,
        _iterator,
        _step,
        def,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref$cwd = _ref.cwd, cwd = _ref$cwd === void 0 ? process.cwd() : _ref$cwd, _ref$dryRun = _ref.dryRun, dryRun = _ref$dryRun === void 0 ? false : _ref$dryRun, propname = _ref.propname, _ref$overwrite = _ref.overwrite, overwrite = _ref$overwrite === void 0 ? false : _ref$overwrite, _ref$noscope = _ref.noscope, noscope = _ref$noscope === void 0 ? false : _ref$noscope;

            if (file) {
              _context.next = 3;
              break;
            }

            throw new Error('No definitions file specified');

          case 3:
            if (_fsExtra.default.existsSync(_path.default.resolve(file))) {
              _context.next = 5;
              break;
            }

            throw new Error('Definitions file not found');

          case 5:
            _context.next = 7;
            return parseConfig(file, {
              propname
            });

          case 7:
            definitions = _context.sent;

            if (definitions) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return");

          case 10:
            _iterator = _createForOfIteratorHelper(definitions);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                def = _step.value;
                (0, _link.default)(def, {
                  cwd,
                  dryRun,
                  overwrite,
                  noscope
                });
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _bootstrap.apply(this, arguments);
}

function parseConfig(filepath) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$propname = _ref2.propname,
      propname = _ref2$propname === void 0 ? 'crosslink' : _ref2$propname;

  return new Promise(function (resolve, reject) {
    _fsExtra.default.readFile(_path.default.resolve(filepath), function (err, data) {
      if (err) {
        reject(err);
      } else {
        try {
          var str = data.toString();

          if (str[0] === '{') {
            var config = JSON.parse(str);
            resolve(config[propname]);
          } else {
            var lines = str.split('\n').filter(function (v) {
              return !!v;
            }).map(function (v) {
              return v.trim();
            });
            resolve(lines);
          }
        } catch (error) {
          reject(error);
        }
      }
    });
  });
}