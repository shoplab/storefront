import e from"consola";import n from"cookie-parser";import t from"cors";import r from"express";import i from"helmet";const o=e=>"function"==typeof e;const s=["status","statusCode"];function a(e,n=1){const t=e||{};return n>3?null:Object.keys(t).reduce(function(e,n){return function(t,r){if(t)return t;if(s.includes(r))return e[r]||null;const i=n+1;return a(e[r],i)}}(t,n),null)}function c(e){return function(e){var n,t,r;if("Object"===(null===(r=null===(t=null!=(n=e)&&n)||void 0===t?void 0:t.constructor)||void 0===r?void 0:r.name))return function(e){return"isAxiosError"in e}(e)?function(e){return e.response.status}(e):function(e){return"networkError"in e||"code"in e}(e)?function(e){return e.networkError?500:e.code?"string"==typeof e.code?400:e.code:void 0}(e):a(e)}(e)||500}function u(n){try{return require(require.resolve(n,{paths:[process.cwd()]}))}catch(t){throw e.error(t),new Error(`Could not resolve integration "${n}". See the error above for more details.`)}}function l(e){return"string"==typeof e?u(e):[e]}async function d(n,t){return await Object.entries(t).reduce((async(t,[r,i])=>{e.info(`- Loading: ${r} ${i.location}`);const s=await t,a=u(i.location),c=function(e,n){const t=n.extensions,r=e.createApiClient._predefinedExtensions||[];return t?t(r):r}(a,i),d=function(e){return e.flatMap(l)}(c),f=await async function({apiClient:n,tag:t,integration:r}){if(o(null==n?void 0:n.init))try{e.success(`- Integration: ${t} init function Start!`);const i=await n.init(r.configuration);return e.success(`- Integration: ${t} init function Done!`),i}catch(e){throw Error(`Error during executing init function in ${t} integration. Error message: ${e}`)}return{}}({apiClient:a,integration:i,tag:r});return d.forEach((({name:t,extendApp:o})=>{e.info(`- Loading: ${r} extension: ${t}`),o&&o({app:n,configuration:i.configuration})})),e.success(`- Integration: ${r} loaded!`),{...s,[r]:{apiClient:a,extensions:d,initConfig:f,configuration:i.configuration,customQueries:i.customQueries}}}),Promise.resolve({}))}const f=r();async function g(n){e.info("Middleware starting....");const t={contentSecurityPolicy:!1,crossOriginOpenerPolicy:!1,crossOriginEmbedderPolicy:!1,permittedCrossDomainPolicies:{permittedPolicies:"none"},...n.helmet||{}};(!0===n.helmet||n.helmet&&Object.keys(n.helmet).length>0)&&(f.use(i(t)),e.info("VSF `Helmet` middleware added")),e.info("Loading integrations...");const r=await d(f,n.integrations);return e.success("Integrations loaded!"),f.post("/:integrationName/:functionName",(async(n,t)=>{const{integrationName:i,functionName:o}=n.params;if(!r||!r[i])return t.status(404),void t.send(`"${i}" integration is not configured. Please, check the request path or integration configuration.`);const{apiClient:s,configuration:a,extensions:u,customQueries:l={},initConfig:d}=r[i],f={req:n,res:t,extensions:u,customQueries:l},g=s.createApiClient.bind({middleware:f})({...a,...d}).api[o];try{Symbol.iterator in Object(n.body)||(n.body=[n.body]);const e=await g(...n.body);t.send(e)}catch(n){e.error(n),t.status(c(n)),t.send("ServerError: Response not successful. Please, check server logs for more details.")}})),e.success("Middleware created!"),f}f.use(r.json()),f.use(n()),f.use(t({credentials:!0,origin:"http://localhost:3000"})),f.disable("x-powered-by");const m=({args:e})=>e,p=({response:e})=>e,h=(e,n,t={before:m,after:p})=>Object.entries(e).reduce(((e,[r,i])=>({...e,[r]:async(...e)=>{const o=(e=>(n,t)=>{const{customQueries:r={}}=e,{metadata:i={}}=n||{};return Object.entries(t).reduce(((e,[t,o])=>{const s=null==n?void 0:n[t];return{...e,[t]:(s&&r[s]||(()=>o))({...o,metadata:i})}}),{})})(n),s=t.before({callName:r,args:e}),a={...n,extendQuery:o},c=await i(a,...s);return t.after({callName:r,args:e,response:c})}})),{}),v=e=>{const n=function(n,t={}){var r;const i=(null===(r=null==this?void 0:this.middleware)||void 0===r?void 0:r.extensions)||[],s=i.filter((e=>o(null==e?void 0:e.hooks))).map((({hooks:e})=>{var n,t;return e(null===(n=null==this?void 0:this.middleware)||void 0===n?void 0:n.req,null===(t=null==this?void 0:this.middleware)||void 0===t?void 0:t.res)})),a=i.reduce(((e,{extendApiMethods:n})=>({...e,...n})),t),c=s.filter((e=>o(null==e?void 0:e.beforeCreate))).reduce(((e,n)=>n.beforeCreate({configuration:e})),n),u=e.onCreate?e.onCreate(c):{config:n,client:n.client};u.config=s.filter((e=>o(null==e?void 0:e.afterCreate))).reduce(((e,n)=>n.afterCreate({configuration:e})),u.config);const l={before:e=>s.filter((e=>o(null==e?void 0:e.beforeCall))).reduce(((n,t)=>t.beforeCall({...e,configuration:u.config,args:n})),e.args),after:e=>s.filter((e=>o(e.afterCall))).reduce(((n,t)=>t.afterCall({...e,configuration:u.config,response:n})),e.response)};return{api:h({...e.api,...a},{...u,...(null==this?void 0:this.middleware)||{}},l),client:u.client,settings:u.config}};return n._predefinedExtensions=e.extensions||[],{createApiClient:n}};export{v as apiClientFactory,g as createServer};
//# sourceMappingURL=index.es.js.map
