"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("consola"),t=require("cookie-parser"),n=require("cors"),r=require("express"),i=require("helmet");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(e),a=o(t),u=o(n),c=o(r),l=o(i);const d=e=>"function"==typeof e;const f=["status","statusCode"];function g(e,t=1){const n=e||{};return t>3?null:Object.keys(n).reduce(function(e,t){return function(n,r){if(n)return n;if(f.includes(r))return e[r]||null;const i=t+1;return g(e[r],i)}}(n,t),null)}function p(e){return function(e){var t,n,r;if("Object"===(null===(r=null===(n=null!=(t=e)&&t)||void 0===n?void 0:n.constructor)||void 0===r?void 0:r.name))return function(e){return"isAxiosError"in e}(e)?function(e){return e.response.status}(e):function(e){return"networkError"in e||"code"in e}(e)?function(e){return e.networkError?500:e.code?"string"==typeof e.code?400:e.code:void 0}(e):g(e)}(e)||500}function m(e){try{return require(require.resolve(e,{paths:[process.cwd()]}))}catch(t){throw s.default.error(t),new Error(`Could not resolve integration "${e}". See the error above for more details.`)}}function v(e){return"string"==typeof e?m(e):[e]}async function h(e,t){return await Object.entries(t).reduce((async(t,[n,r])=>{s.default.info(`- Loading: ${n} ${r.location}`);const i=await t,o=m(r.location),a=function(e,t){const n=t.extensions,r=e.createApiClient._predefinedExtensions||[];return n?n(r):r}(o,r),u=function(e){return e.flatMap(v)}(a),c=await async function({apiClient:e,tag:t,integration:n}){if(d(null==e?void 0:e.init))try{s.default.success(`- Integration: ${t} init function Start!`);const r=await e.init(n.configuration);return s.default.success(`- Integration: ${t} init function Done!`),r}catch(e){throw Error(`Error during executing init function in ${t} integration. Error message: ${e}`)}return{}}({apiClient:o,integration:r,tag:n});return u.forEach((({name:t,extendApp:i})=>{s.default.info(`- Loading: ${n} extension: ${t}`),i&&i({app:e,configuration:r.configuration})})),s.default.success(`- Integration: ${n} loaded!`),{...i,[n]:{apiClient:o,extensions:u,initConfig:c,configuration:r.configuration,customQueries:r.customQueries}}}),Promise.resolve({}))}const y=c.default();y.use(c.default.json()),y.use(a.default()),y.use(u.default({credentials:!0,origin:"http://localhost:3000"})),y.disable("x-powered-by");const b=({args:e})=>e,C=({response:e})=>e,w=(e,t,n={before:b,after:C})=>Object.entries(e).reduce(((e,[r,i])=>({...e,[r]:async(...e)=>{const o=(e=>(t,n)=>{const{customQueries:r={}}=e,{metadata:i={}}=t||{};return Object.entries(n).reduce(((e,[n,o])=>{const s=null==t?void 0:t[n];return{...e,[n]:(s&&r[s]||(()=>o))({...o,metadata:i})}}),{})})(t),s=n.before({callName:r,args:e}),a={...t,extendQuery:o},u=await i(a,...s);return n.after({callName:r,args:e,response:u})}})),{});exports.apiClientFactory=e=>{const t=function(t,n={}){var r;const i=(null===(r=null==this?void 0:this.middleware)||void 0===r?void 0:r.extensions)||[],o=i.filter((e=>d(null==e?void 0:e.hooks))).map((({hooks:e})=>{var t,n;return e(null===(t=null==this?void 0:this.middleware)||void 0===t?void 0:t.req,null===(n=null==this?void 0:this.middleware)||void 0===n?void 0:n.res)})),s=i.reduce(((e,{extendApiMethods:t})=>({...e,...t})),n),a=o.filter((e=>d(null==e?void 0:e.beforeCreate))).reduce(((e,t)=>t.beforeCreate({configuration:e})),t),u=e.onCreate?e.onCreate(a):{config:t,client:t.client};u.config=o.filter((e=>d(null==e?void 0:e.afterCreate))).reduce(((e,t)=>t.afterCreate({configuration:e})),u.config);const c={before:e=>o.filter((e=>d(null==e?void 0:e.beforeCall))).reduce(((t,n)=>n.beforeCall({...e,configuration:u.config,args:t})),e.args),after:e=>o.filter((e=>d(e.afterCall))).reduce(((t,n)=>n.afterCall({...e,configuration:u.config,response:t})),e.response)};return{api:w({...e.api,...s},{...u,...(null==this?void 0:this.middleware)||{}},c),client:u.client,settings:u.config}};return t._predefinedExtensions=e.extensions||[],{createApiClient:t}},exports.createServer=async function(e){s.default.info("Middleware starting....");const t={contentSecurityPolicy:!1,crossOriginOpenerPolicy:!1,crossOriginEmbedderPolicy:!1,permittedCrossDomainPolicies:{permittedPolicies:"none"},...e.helmet||{}};(!0===e.helmet||e.helmet&&Object.keys(e.helmet).length>0)&&(y.use(l.default(t)),s.default.info("VSF `Helmet` middleware added")),s.default.info("Loading integrations...");const n=await h(y,e.integrations);return s.default.success("Integrations loaded!"),y.post("/:integrationName/:functionName",(async(e,t)=>{const{integrationName:r,functionName:i}=e.params;if(!n||!n[r])return t.status(404),void t.send(`"${r}" integration is not configured. Please, check the request path or integration configuration.`);const{apiClient:o,configuration:a,extensions:u,customQueries:c={},initConfig:l}=n[r],d={req:e,res:t,extensions:u,customQueries:c},f=o.createApiClient.bind({middleware:d})({...a,...l}).api[i];try{Symbol.iterator in Object(e.body)||(e.body=[e.body]);const n=await f(...e.body);t.send(n)}catch(e){s.default.error(e),t.status(p(e)),t.send("ServerError: Response not successful. Please, check server logs for more details.")}})),s.default.success("Middleware created!"),y};
//# sourceMappingURL=index.cjs.js.map
